res[i] <- y[i]-mu[i]
}
#priors for the population parameters
#variance
tau <- pow(sigma_y, -2) #converting a precision
sigma_y ~ dunif(0, 20) #sampling a standard deviation
#prior for the betas
for(i in 1:4) {
beta[i] ~ dnorm(0.0, 1.0E-5)
}
}",
file = "ThermalC_bayesian.bug")
thermalCdata <- list(N = nrow(alex_data),
y = alex_data$Thermal.C,
Elevation = alex_data$Elevation,
Temp = alex_data$Temp,
MC = alex_data$M.C
)
thermalCini <- list(list(beta = c(0.9, 0.002, 0.03, 1.59), sigma_y = 0.12),
list(beta = c(0.9, 0.002, 0.03, 1.59)/2, sigma_y = 0.12/2))
thermalC_bayesian_noclust <- run.jags(model = "ThermalC_bayesian.bug",
monitor=c("beta", "sigma_y","res"),
data = thermalCdata, inits = thermalCini, n.chains = 2,
sample = 30000, burnin = 20000,
thin = 15, adapt = 40000,
method = "rjags", jags.refresh = 10)
###The posterior summary checks?
plot(thermalC_bayesian_noclust, "trace", vars = c("beta", "sigma_y"))
plot(thermalC_bayesian_noclust, "autocorr", vars = c("beta", "sigma_y"))
dic_thermalC_noclust <- extract(thermalC_bayesian_noclust, what = "dic")
dic_thermalC_noclust
thermalC_bayesian_noclust$summaries[1:5, c(1:5)]
as.data.frame(thermalC_bayesian_noclust$summaries[1:5, c(1:5)])
####plotting the credible interval
toplot <- as.data.frame(thermalC_bayesian_noclust$summaries[1:5, c(1:5)])
toplot$Mean
toplot %>% ggplot(aes(x = c("Int", "Elevation", "Temperature", "Moist Content"), y = Mean)) + geom_point() +
geom_errorbar(aes(ymin = Lower95, ymax = Upper95), width=.2,
position = position_dodge(0.05))
toplot %>% ggplot(aes(x = c("Int", "Elevation", "Temperature", "Moist Content"), y = Mean)) + geom_point()
toplot <- as.data.frame(thermalC_bayesian_noclust$summaries[1:4, c(1:5)])
toplot %>% ggplot(aes(x = c("Int", "Elevation", "Temperature", "Moist Content"), y = Mean)) + geom_point()
toplot %>% ggplot(aes(x = c("Intercept", "Elevation", "Temperature", "Moist Content"), y = Mean)) + geom_point() +
geom_errorbar(aes(ymin = Lower95, ymax = Upper95), width=.2,
position = position_dodge(0.05))
toplot %>% ggplot(aes(x = c("Intercept", "Elevation", "Temperature", "Moist Content"), y = Mean)) + geom_point(size = 2) +
geom_errorbar(aes(ymin = Lower95, ymax = Upper95), width = 0.1,
position = position_dodge(0.05), col = "darkgreen")
toplot %>% ggplot(aes(x = c("Intercept", "Elevation", "Temperature", "Moist Content"), y = Mean))  +
geom_errorbar(aes(ymin = Lower95, ymax = Upper95), width = 0.1,
position = position_dodge(0.05), col = "darkgreen", size = 3) + geom_point(size = 4, col = "red2") +
theme_minimal()
toplot %>% ggplot(aes(x = c("Intercept", "Elevation", "Temperature", "Moist Content"), y = Mean))  +
geom_errorbar(aes(ymin = Lower95, ymax = Upper95), width = 0.1,
position = position_dodge(0.05), col = "darkgreen", size = 3) + geom_point(size = 2, col = "red2") +
theme_minimal()
toplot %>% ggplot(aes(x = c("Intercept", "Elevation", "Temperature", "Moist Content"), y = Mean))  +
geom_errorbar(aes(ymin = Lower95, ymax = Upper95), width = 0.1,
position = position_dodge(0.05), col = "darkgreen", size = 1) + geom_point(size = 4, col = "red2") +
theme_minimal()
toplot
knitr::kable(thermalC_bayesian_noclust$summaries[1:5, c(1:5)])
#Bayesian random effect model for Thermal C (spatial correlation treated via accounting for clustering)
alex_data <- alex_data[order(alex_data$Id),]
#normal assumption for thermal C
cat("
model{
#### #the normal likelihood for the data
for(i in 1: N){
mu[i] <-  beta[2]*Elevation[i] + beta[3]*Temp[i] + beta[4]*MC[i] +
b[Id[i]]
y[i] ~ dnorm(mu[i], tau)
res[i] <- y[i] - mu[i]
}
#the cluster random effects
for(j in 1:J) {
b[j] ~ dnorm(beta[1], tau.b)
}
#priors for the population parameters
#variance
tau <- pow(sigma_y, -2) #converting a precision
sigma_y ~ dunif(0, 20) #sampling a standard deviation
#priors for the population parameters
#prior for the betas
for(i in 1:4) {
beta[i] ~ dnorm(0.0, 1.0E-5)
}
#prior for the random effect parameters
#variance between clusters
tau.b <- pow(sigma.b, -2) #converting it to a precision
sigma.b ~ dunif(0, 20) #sampling a standard deviation
###Intra cluster correlation
icc <- sigma.b / (sigma.b + sigma_y)
}", file =  "ThermalC_bayesian.bug")
thermalCdata <- list(N = nrow(alex_data),
Id = alex_data$Id,
y = alex_data$Thermal.C,
Elevation = alex_data$Elevation,
Temp = alex_data$Temp,
MC = alex_data$M.C,
J = length(unique(alex_data$Id))
)
thermalCini <- list(list(beta = c(0.9, 0.002, 0.03, 1.59), sigma_y=0.12,
sigma.b = 0.12),
list(beta = c(0.9, 0.002, 0.03, 1.59)/2, sigma_y=0.12/2,
sigma.b = 0.12/2))
thermalC_bayesian_clust <- run.jags(model =  "ThermalC_bayesian.bug",
monitor=c("beta", "sigma_y", "sigma.b","icc","res"),
data = thermalCdata, inits = thermalCini,
n.chains = 2,
sample = 50000, burnin = 50000,
thin = 15, adapt = 40000,
method = "rjags", jags.refresh = 10)
###The posterior summary checks?
plot(thermalC_bayesian_clust, "trace", vars = c("beta", "sigma_y","sigma.b","icc"))
plot(thermalC_bayesian_clust, "autocorr", vars = c("beta", "sigma_y","sigma.b","icc"))
dic_thermalC_clust <- extract(thermalC_bayesian_clust, what = "dic")
dic_thermalC_clust
toplot_thermalc_clust <- as.data.frame(thermalC_bayesian_clust$summaries[1:4, c(1:5)])
rbind(toplot_thermalc_noclust, toplot_thermalc_clust)
toplot_thermalc_noclust <- as.data.frame(thermalC_bayesian_noclust$summaries[1:4, c(1:5)])
rbind(toplot_thermalc_noclust, toplot_thermalc_clust)
cat("
model{
#### prior for the variogram model
phi ~ dunif(0, 10)
tetha1 ~ dunif(0, 10) #sill
tetha12 ~ dunif(0, 20) #standard deviation tau
tau2 <- pow(tetha12, -2) #precision = 1/tau2
#semi-variogram model (defining the likelihood of the semi-variogram model)
for(k in 1 : N2){
mu_v[k] <- tetha1 * (1 - exp(- u[k] / phi))
vu[k] ~ dnorm(mu_v[k], tau2)
}
#sampling s(x) from the variogram model
for(i in 1: N){
mu_vnew[i] <- tetha1 * (1 - exp(- uvec[i] / phi))
sx[i] ~ dnorm(mu_vnew[i], tau2)
}
#### #the normal likelihood for the data
for(i in 1: N) {
mu[i] <-  beta[2]*Elevation[i] + beta[3]*Temp[i] + beta[4]*MC[i] + sx[i]
y[i] ~ dnorm(mu[i], tau)
}
#priors for the population parameters
#variance
tau <- pow(sigma_y, -2) #converting a precision
sigma_y ~ dunif(0, 20) #sampling a standard deviation
#priors for the population parameters
#prior for the betas
for(i in 1:4) {
beta[i] ~ dnorm(0.0, 1.0E-5)
}
}",
file = "thermal_spbayesian.bug")
thermalCdata <- list(N = nrow(alex_data),
y = alex_data$Thermal.C,
u = vvs_thermalC$u,
vu = vvs_thermalC$v,
uvec = vvs_thermalC$uvec,
N2 = length(vvs_thermalC$u),
Elevation = alex_data$Elevation,
Temp = alex_data$Temp,
MC = alex_data$M.C
)
thermalC_res <- thermalC_bayesian_noclust$summaries[str_detect(row.names(thermalC_bayesian_noclust$summaries), "res"), "Mean"]
thermalC_gdata <- as.geodata(cbind(alex_data$Longitude, alex_data$latitude, thermalC_res))
### varogram across all clusters (we can just keep this)
dd_matrix <- as.matrix(dist(alex_data[, 2:3], diag = T, upper = T))
vvs_thermalC <- variog(thermalC_gdata, uvec = quantile(unique(as.numeric(dd_matrix)), seq(0, 1, 0.01)), option = "bin")
plot(vvs_thermalC, type="p", pch=19, col = 2,cex.lab = 1.3,
main = "",
ylab = expression(v(u)), lwd = 2 )
cat("
model{
#### prior for the variogram model
phi ~ dunif(0, 10)
tetha1 ~ dunif(0, 10) #sill
tetha12 ~ dunif(0, 20) #standard deviation tau
tau2 <- pow(tetha12, -2) #precision = 1/tau2
#semi-variogram model (defining the likelihood of the semi-variogram model)
for(k in 1 : N2){
mu_v[k] <- tetha1 * (1 - exp(- u[k] / phi))
vu[k] ~ dnorm(mu_v[k], tau2)
}
#sampling s(x) from the variogram model
for(i in 1: N){
mu_vnew[i] <- tetha1 * (1 - exp(- uvec[i] / phi))
sx[i] ~ dnorm(mu_vnew[i], tau2)
}
#### #the normal likelihood for the data
for(i in 1: N) {
mu[i] <-  beta[2]*Elevation[i] + beta[3]*Temp[i] + beta[4]*MC[i] + sx[i]
y[i] ~ dnorm(mu[i], tau)
}
#priors for the population parameters
#variance
tau <- pow(sigma_y, -2) #converting a precision
sigma_y ~ dunif(0, 20) #sampling a standard deviation
#priors for the population parameters
#prior for the betas
for(i in 1:4) {
beta[i] ~ dnorm(0.0, 1.0E-5)
}
}",
file = "thermal_spbayesian.bug")
thermalCdata <- list(N = nrow(alex_data),
y = alex_data$Thermal.C,
u = vvs_thermalC$u,
vu = vvs_thermalC$v,
uvec = vvs_thermalC$uvec,
N2 = length(vvs_thermalC$u),
Elevation = alex_data$Elevation,
Temp = alex_data$Temp,
MC = alex_data$M.C
)
thermalCini <- list(list(beta = c(0.9, 0.002, 0.03, 1.59), sigma_y=0.12,
tetha1 = 0.5, phi = 1.0, tetha12 = 1.23),
list(beta = c(0.9, 0.002, 0.03, 1.59)/2, sigma_y=0.12/2,
tetha1 = 0.5/2, phi = 1.0/2, tetha12 = 1.23/2)
)
thermalC_bayesian_sp <- run.jags(model =  "thermal_spbayesian.bug",
monitor=c("beta", "sigma_y", "tetha1", "tetha12", "phi"),
data = thermalCdata, inits = thermalCini,
n.chains = 2,
sample = 50000, burnin = 50000,
thin = 15, adapt = 40000,
method = "rjags", jags.refresh = 10)
thermalC_bayesian_sp
plot(thermalC_bayesian_sp, "trace", vars = c("beta", "sigma_y", "tetha1", "tetha12", "phi"))
plot(thermalC_bayesian_sp, "autocorr", vars = c("beta", "sigma_y", "tetha1", "tetha12", "phi"))
dic_thermalC_sp <- extract(thermalC_bayesian_sp, what = "dic")
dic_thermalC_sp
toplot_thermalc_spatial <- as.data.frame(thermalC_bayesian_sp$summaries[1:4, c(1:5)])
thermalC_res <- thermalC_bayesian_clust$summaries[str_detect(row.names(thermalC_bayesian_clust$summaries), "res"), "Mean"]
thermalC_gdata <- as.geodata(cbind(alex_data$Longitude, alex_data$latitude, thermalC_res))
### varogram across all clusters (we can just keep this)
dd_matrix <- as.matrix(dist(alex_data[, 2:3], diag = T, upper = T))
vvs_thermalC <- variog(thermalC_gdata, uvec = quantile(unique(as.numeric(dd_matrix)), seq(0, 1, 0.01)), option = "bin")
plot(vvs_thermalC, type="p", pch=19, col = 2,cex.lab = 1.3,
main = "",
ylab = expression(v(u)), lwd = 2 )
cat("
model{
#### prior for the variogram model
phi ~ dunif(0, 10)
tetha1 ~ dunif(0, 10) #sill
tetha12 ~ dunif(0, 20) #standard deviation tau
tau2 <- pow(tetha12, -2) #precision = 1/tau2
#semi-variogram model (defining the likelihood of the semi-variogram model)
for(k in 1 : N2){
mu_v[k] <- tetha1 * (1 - exp(- u[k] / phi))
vu[k] ~ dnorm(mu_v[k], tau2)
}
#sampling s(x) from the variogram model
for(i in 1: N){
mu_vnew[i] <- tetha1 * (1 - exp(- uvec[i] / phi))
sx[i] ~ dnorm(mu_vnew[i], tau2)
}
#### #the normal likelihood for the data
for(i in 1: N){
#you didn't add the random effect b[Id[i]]
mu[i] <-  beta[2]*Elevation[i] + beta[3]*Temp[i] + beta[4]*MC[i] +
b[Id[i]] + sx[i]
y[i] ~ dnorm(mu[i], tau)
res[i] <- y[i] - mu[i]
}
#the cluster random effects
for(j in 1:J) {
b[j] ~ dnorm(beta[1], tau.b)
}
#priors for the population parameters
#variance
tau <- pow(sigma_y, -2) #converting a precision
sigma_y ~ dunif(0, 20) #sampling a standard deviation
#priors for the population parameters
#prior for the betas
for(i in 1:4) {
beta[i] ~ dnorm(0.0, 1.0E-5)
}
#prior for the random effect parameters
#variance between clusters
tau.b <- pow(sigma.b, -2) #converting it to a precision
sigma.b ~ dunif(0, 20) #sampling a standard deviation
###Intra cluster correlation
icc <- sigma.b / (sigma.b + sigma_y)
#ratio of variotion due to cluster and that due to spatial correlation
sp_clus <- tetha12 / sigma.b
}",
file = "thermal_spclustbayesian.bug")
thermalCdata <- list(N = nrow(alex_data),
Id = alex_data$Id,
y = alex_data$Thermal.C,
u = vvs_thermalC$u,
vu = vvs_thermalC$v,
uvec = vvs_thermalC$uvec,
N2 = length(vvs_thermalC$u),
Elevation = alex_data$Elevation,
Temp = alex_data$Temp,
MC = alex_data$M.C,
J = length(unique(alex_data$Id))
)
thermalCini <- list(list(beta = c(0.9, 0.002, 0.03, 1.59), sigma_y=0.12,
sigma.b = 0.12, tetha1 = 0.5, phi = 1.0, tetha12 = 1.23),
list(beta = c(0.9, 0.002, 0.03, 1.59)/2, sigma_y=0.12/2,
sigma.b = 0.12/2 , tetha1 = 0.5/2, phi = 1.0/2, tetha12 = 1.23/2)
)
thermalC_bayesian_spclust <- run.jags(model =  "thermal_spclustbayesian.bug",
monitor=c("beta", "sigma_y", "sigma.b","icc","tetha1", "tetha12", "phi", "sp_clus"),
data = thermalCdata, inits = thermalCini,
n.chains = 2,
sample = 50000, burnin = 50000,
thin = 15, adapt = 40000,
method = "rjags", jags.refresh = 10)
###The posterior summary checks?
plot(thermalC_bayesian_spclust, "trace", vars = c("beta", "sigma_y", "sigma.b","icc","tetha1", "tetha12", "phi", "sp_clus"))
plot(thermalC_bayesian_spclust, "autocorr", vars = c("beta", "sigma_y", "sigma.b","icc","tetha1", "tetha12", "phi", "sp_clus"))
dic_thermalC_spclust <- extract(thermalC_bayesian_spclust, what = "dic")
dic_thermalC_spclust
toplot_thermalc_spclust <- as.data.frame(thermalC_bayesian_spclust$summaries[1:4, c(1:5)])
toplot <- rbind(toplot_thermalc_noclust, toplot_thermalc_clust, toplot_thermalc_spatial, toplot_thermalc_spclust)
toplot$Model <- c(rep("Linear", 4), rep("Cluster", 4), rep("Spatial", 4), rep("Spatial-Cluster", 4))
toplot_thermalc_spclust
toplot %>% ggplot(aes(x = c("Intercept", "Elevation", "Temperature", "Moisture Content"), y = Mean, group)) +
geom_point(size = 2) +
geom_errorbar(aes(group = Model, color = Model), size = 1, width = 0.2,
position = position_dodge(0.05))
toplot %>% ggplot(aes(x = c("Intercept", "Elevation", "Temperature", "Moisture Content"), y = Mean, group)) +
geom_point(size = 2)
toplot
rep(c("Intercept", "Elevation", "Temperature", "Moisture Content"), 4)
toplot$Parameter <- rep(c("Intercept", "Elevation", "Temperature", "Moisture Content"), 4)
toplot %>% ggplot(aes(x = Parameter, y = Mean, group = Model)) +
geom_point(size = 2)
toplot %>% ggplot(aes(x = Parameter, y = Mean, group = Model)) +
geom_point(aes(color = Model), size = 2)
toplot %>% ggplot(aes(x = Parameter, y = Mean, fill = Model)) +
geom_point(size = 2)
toplot %>% ggplot(aes(x = Parameter, y = Mean, fill = Model)) +
geom_point(size = 2) +
geom_errorbar(aes( color = Model), size = 1, width = 0.2,
position = position_dodge(0.05))
toplot %>% ggplot(aes(x = Parameter, y = Mean, fill = Model)) +
geom_point(size = 2) +
geom_errorbar(aes(ymin = Lower95, ymax = Upper95, color = Model), size = 1, width = 0.2,
position = position_dodge(0.05))
thermalC_bayesian_sp$summaries
cat("
model{
#### prior for the variogram model
phi ~ dunif(0, 10)
tetha1 ~ dunif(0, 10) #sill
tetha12 ~ dunif(0, 20) #standard deviation tau
tau2 <- pow(tetha12, -2) #precision = 1/tau2
#semi-variogram model (defining the likelihood of the semi-variogram model)
for(k in 1 : N2){
mu_v[k] <- tetha1 * (1 - exp(- u[k] / phi))
vu[k] ~ dnorm(mu_v[k], tau2)
}
#sampling s(x) from the variogram model
for(i in 1: N){
mu_vnew[i] <- tetha1 * (1 - exp(- uvec[i] / phi))
sx[i] ~ dnorm(mu_vnew[i], tau2)
}
#### #the normal likelihood for the data
for(i in 1: N) {
mu[i] <-  beta[1] + beta[2]*Elevation[i] + beta[3]*Temp[i] + beta[4]*MC[i] + sx[i]
y[i] ~ dnorm(mu[i], tau)
}
#priors for the population parameters
#variance
tau <- pow(sigma_y, -2) #converting a precision
sigma_y ~ dunif(0, 20) #sampling a standard deviation
#priors for the population parameters
#prior for the betas
for(i in 1:4) {
beta[i] ~ dnorm(0.0, 1.0E-5)
}
}",
file = "thermal_spbayesian.bug")
thermalCdata <- list(N = nrow(alex_data),
y = alex_data$Thermal.C,
u = vvs_thermalC$u,
vu = vvs_thermalC$v,
uvec = vvs_thermalC$uvec,
N2 = length(vvs_thermalC$u),
Elevation = alex_data$Elevation,
Temp = alex_data$Temp,
MC = alex_data$M.C
)
thermalCini <- list(list(beta = c(0.9, 0.002, 0.03, 1.59), sigma_y=0.12,
tetha1 = 0.5, phi = 1.0, tetha12 = 1.23),
list(beta = c(0.9, 0.002, 0.03, 1.59)/2, sigma_y=0.12/2,
tetha1 = 0.5/2, phi = 1.0/2, tetha12 = 1.23/2)
)
thermalC_bayesian_sp <- run.jags(model =  "thermal_spbayesian.bug",
monitor=c("beta", "sigma_y", "tetha1", "tetha12", "phi"),
data = thermalCdata, inits = thermalCini,
n.chains = 2,
sample = 50000, burnin = 50000,
thin = 15, adapt = 40000,
method = "rjags", jags.refresh = 10)
thermalC_bayesian_sp
plot(thermalC_bayesian_sp, "trace", vars = c("beta", "sigma_y", "tetha1", "tetha12", "phi"))
plot(thermalC_bayesian_sp, "autocorr", vars = c("beta", "sigma_y", "tetha1", "tetha12", "phi"))
dic_thermalC_sp <- extract(thermalC_bayesian_sp, what = "dic")
dic_thermalC_sp
toplot_thermalc_spatial <- as.data.frame(thermalC_bayesian_sp$summaries[1:4, c(1:5)])
toplot_thermalc_spclust <- as.data.frame(thermalC_bayesian_spclust$summaries[1:4, c(1:5)])
toplot <- rbind(toplot_thermalc_noclust, toplot_thermalc_clust, toplot_thermalc_spatial, toplot_thermalc_spclust)
toplot$Model <- c(rep("Linear", 4), rep("Cluster", 4), rep("Spatial", 4), rep("Spatial-Cluster", 4))
toplot$Parameter <- rep(c("Intercept", "Elevation", "Temperature", "Moisture Content"), 4)
toplot
toplot %>% ggplot(aes(x = Parameter, y = Mean, fill = Model)) +
geom_errorbar(aes(ymin = Lower95, ymax = Upper95, color = Model), size = 1, width = 0.2,
position = position_dodge(0.05))
toplot %>% ggplot(aes(x = Parameter, y = Mean, fill = Model)) +
geom_errorbar(aes(ymin = Lower95, ymax = Upper95, color = Model), size = 1, width = 0.2,
position = position_dodge(0.5))
toplot %>% ggplot(aes(x = Parameter, y = Mean, fill = Model)) +
geom_errorbar(aes(ymin = Lower95, ymax = Upper95, color = Model), size = 1.7, width = 0.2,
position = position_dodge(0.7)) + theme_minimal() + ggtitle("Effects on Thermal.C") +
labs(y = "Credible Interval and Posterior Mean")  + geom_point(size = 2)
toplot %>% ggplot(aes(x = Parameter, y = Mean, color = Model)) +
geom_errorbar(aes(ymin = Lower95, ymax = Upper95, color = Model), size = 1.7, width = 0.2,
position = position_dodge(0.7)) + theme_minimal() + ggtitle("Effects on Thermal.C") +
labs(y = "Credible Interval and Posterior Mean")  + geom_point(size = 2, color = "black")
toplot %>% ggplot(aes(x = Parameter, y = Mean, color = Model)) +
geom_errorbar(aes(ymin = Lower95, ymax = Upper95, color = Model), size = 1.7, width = 0.2,
position = position_dodge(0.7)) + theme_minimal() + ggtitle("Effects on Thermal.C") +
labs(y = "Credible Interval and Posterior Mean")  + geom_point(aes(color = Model), size = 2, color = "black")
toplot %>% ggplot(aes(x = Parameter, y = Mean, color = Model)) +
geom_errorbar(aes(ymin = Lower95, ymax = Upper95, color = Model), size = 1.7, width = 0.2,
position = position_dodge(0.7)) + theme_minimal() + ggtitle("Effects on Thermal.C") +
labs(y = "Credible Interval and Posterior Mean")  + geom_point(aes(color = Model), size = 2)
toplot %>% ggplot(aes(x = Parameter, y = Mean, color = Model)) +
geom_errorbar(aes(ymin = Lower95, ymax = Upper95, color = Model), size = 1.7, width = 0.2,
position = position_dodge(0.7)) + theme_minimal() + ggtitle("Effects on Thermal.C") +
labs(y = "Credible Interval and Posterior Mean")  +
geom_point(aes(color = Model), size = 2, position = position_dodge(0.7))
toplot %>% ggplot(aes(x = Parameter, y = Mean, color = Model)) +
geom_errorbar(aes(ymin = Lower95, ymax = Upper95, color = Model), size = 1.7, width = 0.2,
position = position_dodge(0.7)) + theme_minimal() + ggtitle("Effects on Thermal.C") +
labs(y = "Credible Interval and Posterior Mean")  +
geom_point(aes(color = Model), colcor = "black", size = 2, position = position_dodge(0.7))
toplot %>% ggplot(aes(x = Parameter, y = Mean, color = Model)) +
geom_errorbar(aes(ymin = Lower95, ymax = Upper95, color = Model), size = 1.7, width = 0.2,
position = position_dodge(0.7)) + theme_minimal() + ggtitle("Effects on Thermal.C") +
labs(y = "Credible Interval and Posterior Mean")  +
geom_point(aes(color = Model), color = "black", size = 2, position = position_dodge(0.7))
toplot %>% ggplot(aes(x = Parameter, y = Mean, color = Model)) +
geom_errorbar(aes(ymin = Lower95, ymax = Upper95, color = Model), size = 1.7, width = 0.2,
position = position_dodge(0.7)) + theme_minimal() + ggtitle("Effects on Thermal.C") +
labs(y = "Credible Interval and Posterior Mean")  +
geom_point(aes(color = Model), size = 4, position = position_dodge(0.7))
?geom_hline
toplot %>% ggplot(aes(x = Parameter, y = Mean, color = Model)) +
geom_errorbar(aes(ymin = Lower95, ymax = Upper95, color = Model), size = 1.7, width = 0.2,
position = position_dodge(0.7)) + theme_minimal() + ggtitle("Effects on Thermal.C") +
labs(y = "Credible Interval and Posterior Mean")  +
geom_point(aes(color = Model), size = 4, position = position_dodge(0.7)) + geom_hline(yintercept = 0, size = 2)
toplot %>% ggplot(aes(x = Parameter, y = Mean, color = Model)) +
geom_errorbar(aes(ymin = Lower95, ymax = Upper95, color = Model), size = 1.7, width = 0.2,
position = position_dodge(0.7)) + theme_minimal() + ggtitle("Effects on Thermal.C") +
labs(y = "Credible Interval and Posterior Mean")  +
geom_point(aes(color = Model), size = 4, position = position_dodge(0.7)) + geom_hline(yintercept = 0, size = 1, linetype = 2)
?scale_color_discrete
?scale_y_continuous
toplot %>% ggplot(aes(x = Parameter, y = Mean, color = Model)) +
geom_errorbar(aes(ymin = Lower95, ymax = Upper95, color = Model), size = 1.7, width = 0.2,
position = position_dodge(0.7)) + theme_minimal() + ggtitle("Effects on Thermal.C") +
labs(y = "Credible Interval and Posterior Mean")  +
geom_point(aes(color = Model), size = 4, position = position_dodge(0.7)) +
geom_hline(yintercept = 0, size = 1, linetype = 2) +
scale_y_continuous(breaks = -7:7)
2.5:8
toplot %>% ggplot(aes(x = Parameter, y = Mean, color = Model)) +
geom_errorbar(aes(ymin = Lower95, ymax = Upper95, color = Model), size = 1.7, width = 0.2,
position = position_dodge(0.7)) + theme_minimal() + ggtitle("Effects on Thermal.C") +
labs(y = "Credible Interval and Posterior Mean")  +
geom_point(aes(color = Model), size = 4, position = position_dodge(0.7)) +
geom_hline(yintercept = 0, size = 1, linetype = 2) +
scale_y_continuous(breaks = c(-6:-2, -1.5, -1, -0.5, -0.25, -0.15, 0, 0.25, 0.5, 1, 1.5, 2, 2.5:8))
toplot %>% ggplot(aes(x = Parameter, y = Mean, color = Model)) +
geom_errorbar(aes(ymin = Lower95, ymax = Upper95, color = Model), size = 1.7, width = 0.2,
position = position_dodge(0.7)) + theme_minimal() + ggtitle("Effects on Thermal.C") +
labs(y = "Credible Interval and Posterior Mean")  +
geom_point(aes(color = Model), size = 2, position = position_dodge(0.7)) +
geom_hline(yintercept = 0, size = 1, linetype = 2) +
scale_y_continuous(breaks = -6:7)
seq(-6, 7, by = 0.25)
toplot %>% ggplot(aes(x = Parameter, y = Mean, color = Model)) +
geom_errorbar(aes(ymin = Lower95, ymax = Upper95, color = Model), size = 1.7, width = 0.2,
position = position_dodge(0.7)) + theme_minimal() + ggtitle("Effects on Thermal.C") +
labs(y = "Credible Interval and Posterior Mean")  +
geom_point(aes(color = Model), size = 2, position = position_dodge(0.7)) +
geom_hline(yintercept = 0, size = 1, linetype = 2) +
scale_y_continuous(breaks = seq(-6, 7, by = 0.25))
toplot %>% ggplot(aes(x = Parameter, y = Mean, color = Model)) +
geom_errorbar(aes(ymin = Lower95, ymax = Upper95, color = Model), size = 1.9, width = 0.2,
position = position_dodge(0.7)) + theme_minimal() + ggtitle("Effects on Thermal.C") +
labs(y = "Credible Interval and Posterior Mean")  +
geom_point(aes(color = Model), size = 4, position = position_dodge(0.7)) +
geom_hline(yintercept = 0, size = 1, linetype = 2) +
scale_y_continuous(breaks = seq(-6, 7, by = 0.5))
toplot %>% ggplot(aes(x = Parameter, y = Mean, color = Model)) +
geom_errorbar(aes(ymin = Lower95, ymax = Upper95, color = Model), size = 1.5, width = 0.2,
position = position_dodge(0.7)) + theme_minimal() + ggtitle("Effects on Thermal.C") +
labs(y = "Credible Interval and Posterior Mean")  +
geom_point(aes(color = Model), size = 4, position = position_dodge(0.7)) +
geom_hline(yintercept = 0, size = 1, linetype = 2) +
scale_y_continuous(breaks = seq(-6, 7, by = 0.5))
